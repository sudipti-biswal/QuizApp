{"ast":null,"code":"var _jsxFileName = \"/Users/roneet/Users/Sudipti/quiz_app/src/components/QuizComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Typography, List, ListItem, ListItemText, Radio, FormControlLabel, Container, Button, Paper, RadioGroup, Box } from \"@mui/material\";\nimport { fetchQuizQuestions } from \"../data/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizComponent = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const quizQuestions = await fetchQuizQuestions();\n      const initialSelectedAnswers = new Array(quizQuestions.length).fill(null);\n      setSelectedAnswers(initialSelectedAnswers);\n      setQuestions(quizQuestions);\n    };\n    fetchQuestions();\n  }, []);\n  const handleAnswerSelect = (questionIndex, answerIndex) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[questionIndex] = answerIndex;\n    setSelectedAnswers(newSelectedAnswers);\n  };\n  const handleQuestionClick = questionIndex => {\n    setCurrentQuestionIndex(questionIndex);\n  };\n  const renderOverviewPanel = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        width: \"50%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: \"Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\"\n        },\n        children: questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(ListItem, {\n          onClick: () => handleQuestionClick(questionIndex),\n          button: true,\n          selected: currentQuestionIndex === questionIndex,\n          style: {\n            backgroundColor: selectedAnswers[questionIndex] !== null ? \"#007bff\" // Attempted questions are blue\n            : currentQuestionIndex === questionIndex ? \"#FFFF00\" // Current question is yellow\n            : \"#f0f0f0\" // Not visited questions are gray\n          },\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: `No ${questionIndex + 1}`\n            // secondary={\n            //   selectedAnswers[questionIndex] !== null\n            //     ? \"Attempted\"\n            //     : \"Not Attempted\"\n            // }\n            ,\n            style: {\n              color: selectedAnswers[questionIndex] !== null ? \"#fff\" : \"#000\" // Text color\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)\n        }, questionIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        style: {\n          padding: \"20px\",\n          marginRight: \"20px\",\n          width: \"900px\",\n          backgroundColor: \"#f0f0f0\",\n          display: \"flex\",\n          flexWrap: \"wrap\"\n        },\n        children: renderOverviewPanel()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        style: {\n          padding: \"20px\",\n          width: \"70%\",\n          height: \"fit-content\",\n          backgroundColor: \"#ffffff\" // Example background color\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: \"Quiz Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n                name: `question-${currentQuestionIndex}`,\n                value: selectedAnswers[currentQuestionIndex],\n                onChange: e => handleAnswerSelect(currentQuestionIndex, e.target.value),\n                children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.incorrect_answers.map((choice, choiceIndex) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  value: choiceIndex,\n                  control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 34\n                  }, this),\n                  label: choice\n                }, choiceIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        marginTop: \"20px\",\n        backgroundColor: \"#007bff\"\n      } // Example button style\n      ,\n      children: \"Submit Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizComponent, \"7gpPMpY2XtnLIvEfsFTPdl8rjgo=\");\n_c = QuizComponent;\nexport default QuizComponent;\nvar _c;\n$RefreshReg$(_c, \"QuizComponent\");","map":{"version":3,"names":["React","useState","useEffect","Typography","List","ListItem","ListItemText","Radio","FormControlLabel","Container","Button","Paper","RadioGroup","Box","fetchQuizQuestions","jsxDEV","_jsxDEV","QuizComponent","_s","questions","setQuestions","selectedAnswers","setSelectedAnswers","currentQuestionIndex","setCurrentQuestionIndex","fetchQuestions","quizQuestions","initialSelectedAnswers","Array","length","fill","handleAnswerSelect","questionIndex","answerIndex","newSelectedAnswers","handleQuestionClick","renderOverviewPanel","style","display","flexWrap","width","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","map","question","onClick","button","selected","backgroundColor","primary","color","currentQuestion","maxWidth","justifyContent","elevation","padding","marginRight","height","name","value","onChange","e","target","incorrect_answers","choice","choiceIndex","control","label","marginTop","_c","$RefreshReg$"],"sources":["/Users/roneet/Users/Sudipti/quiz_app/src/components/QuizComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  Radio,\n  FormControlLabel,\n  Container,\n  Button,\n  Paper,\n  RadioGroup,\n  Box,\n} from \"@mui/material\";\n\nimport { fetchQuizQuestions } from \"../data/api\";\n\nconst QuizComponent = () => {\n  const [questions, setQuestions] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const quizQuestions = await fetchQuizQuestions();\n      const initialSelectedAnswers = new Array(quizQuestions.length).fill(null);\n      setSelectedAnswers(initialSelectedAnswers);\n      setQuestions(quizQuestions);\n    };\n\n    fetchQuestions();\n  }, []);\n\n  const handleAnswerSelect = (questionIndex, answerIndex) => {\n    const newSelectedAnswers = [...selectedAnswers];\n    newSelectedAnswers[questionIndex] = answerIndex;\n    setSelectedAnswers(newSelectedAnswers);\n  };\n\n  const handleQuestionClick = (questionIndex) => {\n    setCurrentQuestionIndex(questionIndex);\n  };\n\n  const renderOverviewPanel = () => {\n    return (\n      <div style={{ display: \"flex\", flexWrap: \"wrap\", width: \"50%\" }}>\n        <Typography variant=\"h5\">Questions</Typography>\n        <List style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n          {questions.map((question, questionIndex) => (\n            <ListItem\n              key={questionIndex}\n              onClick={() => handleQuestionClick(questionIndex)}\n              button\n              selected={currentQuestionIndex === questionIndex}\n              style={{\n                backgroundColor:\n                  selectedAnswers[questionIndex] !== null\n                    ? \"#007bff\" // Attempted questions are blue\n                    : currentQuestionIndex === questionIndex\n                    ? \"#FFFF00\" // Current question is yellow\n                    : \"#f0f0f0\", // Not visited questions are gray\n              }}\n            >\n              <ListItemText\n                primary={`No ${questionIndex + 1}`}\n                // secondary={\n                //   selectedAnswers[questionIndex] !== null\n                //     ? \"Attempted\"\n                //     : \"Not Attempted\"\n                // }\n                style={{\n                  color:\n                    selectedAnswers[questionIndex] !== null ? \"#fff\" : \"#000\", // Text color\n                }}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n  };\n\n  const currentQuestion = questions[currentQuestionIndex];\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        {/* Overview Panel */}\n        <Paper\n          elevation={3}\n          style={{\n            padding: \"20px\",\n            marginRight: \"20px\",\n            width: \"900px\",\n            backgroundColor: \"#f0f0f0\",\n            display: \"flex\",\n            flexWrap: \"wrap\",\n          }}\n        >\n          {renderOverviewPanel()}\n        </Paper>\n\n        <Paper\n          elevation={3}\n          style={{\n            padding: \"20px\",\n            width: \"70%\",\n            height: \"fit-content\",\n            backgroundColor: \"#ffffff\", // Example background color\n          }}\n        >\n          <Typography variant=\"h5\">Quiz Questions</Typography>\n          <List>\n            <ListItem>\n              <div>\n                <ListItemText primary={currentQuestion?.question} />\n                <RadioGroup\n                  name={`question-${currentQuestionIndex}`}\n                  value={selectedAnswers[currentQuestionIndex]}\n                  onChange={(e) =>\n                    handleAnswerSelect(currentQuestionIndex, e.target.value)\n                  }\n                >\n                  {currentQuestion?.incorrect_answers.map(\n                    (choice, choiceIndex) => (\n                      <FormControlLabel\n                        key={choiceIndex}\n                        value={choiceIndex}\n                        control={<Radio />}\n                        label={choice}\n                      />\n                    )\n                  )}\n                </RadioGroup>\n              </div>\n            </ListItem>\n          </List>\n        </Paper>\n      </Box>\n\n      {/* Submit Button */}\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ marginTop: \"20px\", backgroundColor: \"#007bff\" }} // Example button style\n      >\n        Submit Answers\n      </Button>\n    </Container>\n  );\n};\n\nexport default QuizComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}